{"ast":null,"code":"var _jsxFileName = \"/Users/crops/Desktop/TicketSystem/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport ApiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      localStorage.setItem('token', action.payload.token);\n      return {\n        ...state,\n        user: action.payload.user,\n        // Make sure we're setting the user object correctly\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'AUTH_ERROR':\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, {\n    user: null,\n    isAuthenticated: false,\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadUser();\n    } else {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, []);\n  const loadUser = async () => {\n    try {\n      const user = await ApiService.getProfile();\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: user\n      });\n    } catch (error) {\n      dispatch({\n        type: 'AUTH_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await ApiService.login({\n        email,\n        password\n      });\n      console.log('Login response:', response); // Debug log\n\n      // Ensure we have both token and user data\n      if (response.token && response.user) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: response\n        });\n        return {\n          success: true,\n          user: response.user\n        };\n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      dispatch({\n        type: 'AUTH_ERROR',\n        payload: error.message\n      });\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await ApiService.register({\n        name,\n        email,\n        password\n      });\n      console.log('Register response:', response); // Debug log\n\n      // Ensure we have both token and user data\n      if (response.token && response.user) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: response\n        });\n        return {\n          success: true,\n          user: response.user\n        };\n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      dispatch({\n        type: 'AUTH_ERROR',\n        payload: error.message\n      });\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n  const logout = () => {\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n\n  // Guest login function for UI testing\n  const guestLogin = () => {\n    const guestUser = {\n      token: 'guest-token-' + Date.now(),\n      user: {\n        id: 'guest-user-id',\n        name: 'Guest User',\n        email: 'guest@example.com',\n        role: 'customer'\n      }\n    };\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: guestUser\n    });\n    return {\n      success: true,\n      user: guestUser.user\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      ...state,\n      login,\n      register,\n      logout,\n      guestLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"VxeCXB551d34K0rZu5kJavATDUE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","ApiService","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","localStorage","setItem","payload","token","user","isAuthenticated","loading","error","removeItem","AuthProvider","children","_s","dispatch","getItem","loadUser","getProfile","message","login","email","password","response","console","log","success","Error","register","name","logout","guestLogin","guestUser","Date","now","id","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/crops/Desktop/TicketSystem/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport ApiService from '../services/api';\n\nconst AuthContext = createContext();\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      localStorage.setItem('token', action.payload.token);\n      return {\n        ...state,\n        user: action.payload.user, // Make sure we're setting the user object correctly\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'AUTH_ERROR':\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, {\n    user: null,\n    isAuthenticated: false,\n    loading: true,\n    error: null\n  });\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadUser();\n    } else {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, []);\n\n  const loadUser = async () => {\n    try {\n      const user = await ApiService.getProfile();\n      dispatch({ type: 'LOGIN_SUCCESS', payload: user });\n    } catch (error) {\n      dispatch({ type: 'AUTH_ERROR', payload: error.message });\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      const response = await ApiService.login({ email, password });\n      console.log('Login response:', response); // Debug log\n      \n      // Ensure we have both token and user data\n      if (response.token && response.user) {\n        dispatch({ type: 'LOGIN_SUCCESS', payload: response });\n        return { success: true, user: response.user };\n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      dispatch({ type: 'AUTH_ERROR', payload: error.message });\n      return { success: false, message: error.message };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      const response = await ApiService.register({ name, email, password });\n      console.log('Register response:', response); // Debug log\n      \n      // Ensure we have both token and user data\n      if (response.token && response.user) {\n        dispatch({ type: 'LOGIN_SUCCESS', payload: response });\n        return { success: true, user: response.user };\n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      dispatch({ type: 'AUTH_ERROR', payload: error.message });\n      return { success: false, message: error.message };\n    }\n  };\n\n  const logout = () => {\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  // Guest login function for UI testing\n  const guestLogin = () => {\n    const guestUser = {\n      token: 'guest-token-' + Date.now(),\n      user: {\n        id: 'guest-user-id',\n        name: 'Guest User',\n        email: 'guest@example.com',\n        role: 'customer'\n      }\n    };\n    \n    dispatch({ type: 'LOGIN_SUCCESS', payload: guestUser });\n    return { success: true, user: guestUser.user };\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      ...state,\n      login,\n      register,\n      logout,\n      guestLogin\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}