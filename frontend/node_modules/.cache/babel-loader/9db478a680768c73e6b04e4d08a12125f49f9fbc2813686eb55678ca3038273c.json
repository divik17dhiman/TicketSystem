{"ast":null,"code":"const API_BASE_URL = '/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    var _localStorage$getItem;\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...options.headers\n      }\n    };\n    console.log('API Request:', {\n      url,\n      method: config.method || 'GET',\n      headers: config.headers,\n      hasToken: !!localStorage.getItem('token'),\n      tokenPreview: ((_localStorage$getItem = localStorage.getItem('token')) === null || _localStorage$getItem === void 0 ? void 0 : _localStorage$getItem.substring(0, 20)) + '...'\n    });\n    try {\n      const response = await fetch(url, config);\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers));\n\n      // Check if response is JSON\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        if (!response.ok) {\n          console.error('API Error Response:', data);\n          throw new Error(data.message || 'Something went wrong');\n        }\n        return data;\n      } else {\n        // Handle non-JSON responses\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        throw new Error('Server returned invalid response');\n      }\n    } catch (error) {\n      console.error('API Request Error:', error);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getProfile() {\n    return this.request('/auth/profile');\n  }\n\n  // Ticket methods\n  async getTickets() {\n    return this.request('/tickets');\n  }\n  async createTicket(ticketData) {\n    return this.request('/tickets', {\n      method: 'POST',\n      body: JSON.stringify(ticketData)\n    });\n  }\n  async getTicketById(id) {\n    return this.request(`/tickets/${id}`);\n  }\n  async updateTicket(id, updateData) {\n    return this.request(`/tickets/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n  async addComment(ticketId, message) {\n    return this.request(`/tickets/${ticketId}/comments`, {\n      method: 'POST',\n      body: JSON.stringify({\n        message\n      })\n    });\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","getAuthHeaders","token","localStorage","getItem","headers","Authorization","request","endpoint","options","_localStorage$getItem","url","config","console","log","method","hasToken","tokenPreview","substring","response","fetch","status","Object","fromEntries","contentType","get","includes","data","json","ok","error","Error","message","text","register","userData","body","JSON","stringify","login","credentials","getProfile","getTickets","createTicket","ticketData","getTicketById","id","updateTicket","updateData","addComment","ticketId","apiService"],"sources":["C:/Users/Divik/Downloads/ticketsupportsystem/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = '/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    const headers = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    if (token) {\r\n      headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    return headers;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      ...options,\r\n      headers: {\r\n        ...this.getAuthHeaders(),\r\n        ...options.headers\r\n      }\r\n    };\r\n\r\n    console.log('API Request:', {\r\n      url,\r\n      method: config.method || 'GET',\r\n      headers: config.headers,\r\n      hasToken: !!localStorage.getItem('token'),\r\n      tokenPreview: localStorage.getItem('token')?.substring(0, 20) + '...'\r\n    });\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', Object.fromEntries(response.headers));\r\n      \r\n      // Check if response is JSON\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n          console.error('API Error Response:', data);\r\n          throw new Error(data.message || 'Something went wrong');\r\n        }\r\n        \r\n        return data;\r\n      } else {\r\n        // Handle non-JSON responses\r\n        const text = await response.text();\r\n        console.error('Non-JSON response:', text);\r\n        throw new Error('Server returned invalid response');\r\n      }\r\n    } catch (error) {\r\n      console.error('API Request Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth methods\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials)\r\n    });\r\n  }\r\n\r\n  async getProfile() {\r\n    return this.request('/auth/profile');\r\n  }\r\n\r\n  // Ticket methods\r\n  async getTickets() {\r\n    return this.request('/tickets');\r\n  }\r\n\r\n  async createTicket(ticketData) {\r\n    return this.request('/tickets', {\r\n      method: 'POST',\r\n      body: JSON.stringify(ticketData)\r\n    });\r\n  }\r\n\r\n  async getTicketById(id) {\r\n    return this.request(`/tickets/${id}`);\r\n  }\r\n\r\n  async updateTicket(id, updateData) {\r\n    return this.request(`/tickets/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updateData)\r\n    });\r\n  }\r\n\r\n  async addComment(ticketId, message) {\r\n    return this.request(`/tickets/${ticketId}/comments`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ message })\r\n    });\r\n  }\r\n}\r\n\r\nconst apiService = new ApiService();\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}