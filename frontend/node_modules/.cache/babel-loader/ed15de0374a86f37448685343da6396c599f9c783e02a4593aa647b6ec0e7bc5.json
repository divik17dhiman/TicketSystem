{"ast":null,"code":"const API_BASE_URL = '/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...options.headers\n      }\n    };\n\n    // Only log errors, not every request\n    try {\n      const response = await fetch(url, config);\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        if (!response.ok) {\n          console.error('API Error:', data.message);\n          throw new Error(data.message || 'Something went wrong');\n        }\n        return data;\n      } else {\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        throw new Error('Server returned invalid response');\n      }\n    } catch (error) {\n      console.error('API Request Error:', error.message);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getProfile() {\n    return this.request('/auth/profile');\n  }\n\n  // Ticket methods\n  async getTickets() {\n    return this.request('/tickets');\n  }\n  async createTicket(ticketData) {\n    return this.request('/tickets', {\n      method: 'POST',\n      body: JSON.stringify(ticketData)\n    });\n  }\n  async getTicketById(id) {\n    return this.request(`/tickets/${id}`);\n  }\n  async updateTicket(id, updateData) {\n    // Remove debugging logs\n    return this.request(`/tickets/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n  async addComment(ticketId, commentData) {\n    return this.request(`/tickets/${ticketId}/comments`, {\n      method: 'POST',\n      body: JSON.stringify(commentData)\n    });\n  }\n\n  // Image upload methods\n  async uploadImage(imageFile) {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    console.log('Uploading single image:', imageFile.name);\n    try {\n      const response = await fetch(`${this.baseURL}/upload/image`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Image upload error:', error);\n      throw error;\n    }\n  }\n  async uploadImages(imageFiles) {\n    const formData = new FormData();\n    for (let i = 0; i < imageFiles.length; i++) {\n      formData.append('images', imageFiles[i]);\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    console.log('Uploading multiple images:', imageFiles.length);\n    try {\n      const response = await fetch(`${this.baseURL}/upload/images`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Images upload error:', error);\n      throw error;\n    }\n  }\n\n  // Search and filter methods\n  async searchTickets(searchTerm, filters = {}) {\n    const params = new URLSearchParams();\n    if (searchTerm) params.append('search', searchTerm);\n    if (filters.priority) params.append('priority', filters.priority);\n    if (filters.category) params.append('category', filters.category);\n    if (filters.assignedTo) params.append('assignedTo', filters.assignedTo);\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    return this.request(`/tickets/search?${params.toString()}`);\n  }\n  async getAgents() {\n    return this.request('/users/agents');\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","getAuthHeaders","token","localStorage","getItem","headers","Authorization","request","endpoint","options","url","config","response","fetch","contentType","get","includes","data","json","ok","console","error","message","Error","text","register","userData","method","body","JSON","stringify","login","credentials","getProfile","getTickets","createTicket","ticketData","getTicketById","id","updateTicket","updateData","addComment","ticketId","commentData","uploadImage","imageFile","formData","FormData","append","log","name","errorData","uploadImages","imageFiles","i","length","searchTickets","searchTerm","filters","params","URLSearchParams","priority","category","assignedTo","dateFrom","dateTo","sortBy","toString","getAgents","apiService"],"sources":["/Users/crops/Desktop/TicketSystem/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = '/api';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    \n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return headers;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...options.headers\n      }\n    };\n\n    // Only log errors, not every request\n    try {\n      const response = await fetch(url, config);\n      \n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        \n        if (!response.ok) {\n          console.error('API Error:', data.message);\n          throw new Error(data.message || 'Something went wrong');\n        }\n        \n        return data;\n      } else {\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        throw new Error('Server returned invalid response');\n      }\n    } catch (error) {\n      console.error('API Request Error:', error.message);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n\n  async getProfile() {\n    return this.request('/auth/profile');\n  }\n\n  // Ticket methods\n  async getTickets() {\n    return this.request('/tickets');\n  }\n\n  async createTicket(ticketData) {\n    return this.request('/tickets', {\n      method: 'POST',\n      body: JSON.stringify(ticketData)\n    });\n  }\n\n  async getTicketById(id) {\n    return this.request(`/tickets/${id}`);\n  }\n\n  async updateTicket(id, updateData) {\n    // Remove debugging logs\n    return this.request(`/tickets/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n\n  async addComment(ticketId, commentData) {\n    return this.request(`/tickets/${ticketId}/comments`, {\n      method: 'POST',\n      body: JSON.stringify(commentData)\n    });\n  }\n\n  // Image upload methods\n  async uploadImage(imageFile) {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    console.log('Uploading single image:', imageFile.name);\n\n    try {\n      const response = await fetch(`${this.baseURL}/upload/image`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Image upload error:', error);\n      throw error;\n    }\n  }\n\n  async uploadImages(imageFiles) {\n    const formData = new FormData();\n    for (let i = 0; i < imageFiles.length; i++) {\n      formData.append('images', imageFiles[i]);\n    }\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    console.log('Uploading multiple images:', imageFiles.length);\n\n    try {\n      const response = await fetch(`${this.baseURL}/upload/images`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Images upload error:', error);\n      throw error;\n    }\n  }\n\n  // Search and filter methods\n  async searchTickets(searchTerm, filters = {}) {\n    const params = new URLSearchParams();\n    if (searchTerm) params.append('search', searchTerm);\n    if (filters.priority) params.append('priority', filters.priority);\n    if (filters.category) params.append('category', filters.category);\n    if (filters.assignedTo) params.append('assignedTo', filters.assignedTo);\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n\n    return this.request(`/tickets/search?${params.toString()}`);\n  }\n\n  async getAgents() {\n    return this.request('/users/agents');\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}