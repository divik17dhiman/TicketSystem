{"ast":null,"code":"const API_BASE_URL = '/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getAuthHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Check if response is JSON\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        if (!response.ok) {\n          throw new Error(data.message || 'Something went wrong');\n        }\n        return data;\n      } else {\n        // Handle non-JSON responses\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        throw new Error('Server returned invalid response');\n      }\n    } catch (error) {\n      console.error('API Request Error:', error);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getProfile() {\n    return this.request('/auth/profile');\n  }\n\n  // Ticket methods\n  async getTickets() {\n    return this.request('/tickets');\n  }\n  async createTicket(ticketData) {\n    return this.request('/tickets', {\n      method: 'POST',\n      body: JSON.stringify(ticketData)\n    });\n  }\n  async getTicketById(id) {\n    return this.request(`/tickets/${id}`);\n  }\n  async updateTicket(id, updateData) {\n    return this.request(`/tickets/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n  async addComment(ticketId, message) {\n    return this.request(`/tickets/${ticketId}/comments`, {\n      method: 'POST',\n      body: JSON.stringify({\n        message\n      })\n    });\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","getAuthHeaders","token","localStorage","getItem","Authorization","request","endpoint","options","url","config","headers","response","fetch","contentType","get","includes","data","json","ok","Error","message","text","console","error","register","userData","method","body","JSON","stringify","login","credentials","getProfile","getTickets","createTicket","ticketData","getTicketById","id","updateTicket","updateData","addComment","ticketId","apiService"],"sources":["C:/Users/Divik/Downloads/ticketsupportsystem/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = '/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: this.getAuthHeaders(),\r\n      ...options\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      // Check if response is JSON\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(data.message || 'Something went wrong');\r\n        }\r\n        \r\n        return data;\r\n      } else {\r\n        // Handle non-JSON responses\r\n        const text = await response.text();\r\n        console.error('Non-JSON response:', text);\r\n        throw new Error('Server returned invalid response');\r\n      }\r\n    } catch (error) {\r\n      console.error('API Request Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth methods\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials)\r\n    });\r\n  }\r\n\r\n  async getProfile() {\r\n    return this.request('/auth/profile');\r\n  }\r\n\r\n  // Ticket methods\r\n  async getTickets() {\r\n    return this.request('/tickets');\r\n  }\r\n\r\n  async createTicket(ticketData) {\r\n    return this.request('/tickets', {\r\n      method: 'POST',\r\n      body: JSON.stringify(ticketData)\r\n    });\r\n  }\r\n\r\n  async getTicketById(id) {\r\n    return this.request(`/tickets/${id}`);\r\n  }\r\n\r\n  async updateTicket(id, updateData) {\r\n    return this.request(`/tickets/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updateData)\r\n    });\r\n  }\r\n\r\n  async addComment(ticketId, message) {\r\n    return this.request(`/tickets/${ticketId}/comments`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ message })\r\n    });\r\n  }\r\n}\r\n\r\nconst apiService = new ApiService();\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}