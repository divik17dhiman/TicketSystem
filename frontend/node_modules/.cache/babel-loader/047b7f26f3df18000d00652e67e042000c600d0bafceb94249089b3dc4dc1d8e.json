{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5002/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Check if current user is in guest mode\n  isGuestMode() {\n    const token = localStorage.getItem('token');\n    return token && token.startsWith('guest-token-');\n  }\n\n  // Mock data for guest mode\n  getMockTickets() {\n    return [{\n      _id: 'mock-ticket-1',\n      title: 'Login Issue with Mobile App',\n      description: 'I am unable to login to the mobile application. The login button is not responding when I tap it. This has been happening since yesterday.',\n      category: 'technical',\n      priority: 'high',\n      status: 'open',\n      user: {\n        _id: 'guest-user-id',\n        name: 'Guest User',\n        email: 'guest@example.com'\n      },\n      createdAt: '2024-01-15T10:30:00Z',\n      comments: [{\n        _id: 'comment-1',\n        message: 'Thank you for reporting this issue. We are looking into it.',\n        user: {\n          _id: 'agent-1',\n          name: 'Support Agent',\n          email: 'agent@company.com',\n          role: 'agent'\n        },\n        createdAt: '2024-01-15T11:00:00Z'\n      }],\n      images: []\n    }, {\n      _id: 'mock-ticket-2',\n      title: 'Billing Discrepancy',\n      description: 'There seems to be an error in my latest bill. I was charged twice for the same service.',\n      category: 'billing',\n      priority: 'medium',\n      status: 'in-progress',\n      user: {\n        _id: 'guest-user-id',\n        name: 'Guest User',\n        email: 'guest@example.com'\n      },\n      assignedTo: {\n        _id: 'agent-2',\n        name: 'Billing Specialist',\n        email: 'billing@company.com'\n      },\n      createdAt: '2024-01-14T14:20:00Z',\n      comments: [],\n      images: []\n    }, {\n      _id: 'mock-ticket-3',\n      title: 'Feature Request: Dark Mode',\n      description: 'It would be great to have a dark mode option in the application for better user experience.',\n      category: 'general',\n      priority: 'low',\n      status: 'resolved',\n      user: {\n        _id: 'guest-user-id',\n        name: 'Guest User',\n        email: 'guest@example.com'\n      },\n      createdAt: '2024-01-13T09:15:00Z',\n      comments: [{\n        _id: 'comment-2',\n        message: 'Great suggestion! We have added this to our roadmap.',\n        user: {\n          _id: 'admin-1',\n          name: 'Product Manager',\n          email: 'pm@company.com',\n          role: 'admin'\n        },\n        createdAt: '2024-01-14T16:30:00Z'\n      }, {\n        _id: 'comment-3',\n        message: 'Dark mode has been implemented in version 2.1.0',\n        user: {\n          _id: 'admin-1',\n          name: 'Product Manager',\n          email: 'pm@company.com',\n          role: 'admin'\n        },\n        createdAt: '2024-01-15T12:45:00Z'\n      }],\n      images: []\n    }];\n  }\n  getMockAgents() {\n    return [{\n      _id: 'agent-1',\n      name: 'Support Agent',\n      email: 'agent@company.com',\n      role: 'agent'\n    }, {\n      _id: 'agent-2',\n      name: 'Billing Specialist',\n      email: 'billing@company.com',\n      role: 'agent'\n    }, {\n      _id: 'admin-1',\n      name: 'Product Manager',\n      email: 'pm@company.com',\n      role: 'admin'\n    }];\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...options.headers\n      }\n    };\n\n    // Only log errors, not every request\n    try {\n      const response = await fetch(url, config);\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        if (!response.ok) {\n          console.error('API Error:', data.message);\n          throw new Error(data.message || 'Something went wrong');\n        }\n        return data;\n      } else {\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        throw new Error('Server returned invalid response');\n      }\n    } catch (error) {\n      console.error('API Request Error:', error.message);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getProfile() {\n    if (this.isGuestMode()) {\n      // Return guest user profile\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            token: localStorage.getItem('token'),\n            user: {\n              id: 'guest-user-id',\n              name: 'Guest User',\n              email: 'guest@example.com',\n              role: 'customer'\n            }\n          });\n        }, 200);\n      });\n    }\n    return this.request('/auth/profile');\n  }\n\n  // Ticket methods\n  async getTickets() {\n    if (this.isGuestMode()) {\n      // Return mock data for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => resolve(this.getMockTickets()), 500);\n      });\n    }\n    return this.request('/tickets');\n  }\n  async createTicket(ticketData) {\n    if (this.isGuestMode()) {\n      // Simulate ticket creation for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const newTicket = {\n            _id: 'mock-ticket-' + Date.now(),\n            ...ticketData,\n            status: 'open',\n            user: {\n              _id: 'guest-user-id',\n              name: 'Guest User',\n              email: 'guest@example.com'\n            },\n            createdAt: new Date().toISOString(),\n            comments: [],\n            images: ticketData.images || []\n          };\n          resolve(newTicket);\n        }, 800);\n      });\n    }\n    return this.request('/tickets', {\n      method: 'POST',\n      body: JSON.stringify(ticketData)\n    });\n  }\n  async getTicketById(id) {\n    if (this.isGuestMode()) {\n      // Return mock ticket data\n      const tickets = this.getMockTickets();\n      const ticket = tickets.find(t => t._id === id);\n      return new Promise(resolve => {\n        setTimeout(() => resolve(ticket || tickets[0]), 300);\n      });\n    }\n    return this.request(`/tickets/${id}`);\n  }\n  async updateTicket(id, updateData) {\n    if (this.isGuestMode()) {\n      // Simulate ticket update for guest mode\n      const tickets = this.getMockTickets();\n      const ticket = tickets.find(t => t._id === id) || tickets[0];\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            ...ticket,\n            ...updateData\n          });\n        }, 600);\n      });\n    }\n    return this.request(`/tickets/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n  async addComment(ticketId, commentData) {\n    if (this.isGuestMode()) {\n      // Simulate adding comment for guest mode\n      const tickets = this.getMockTickets();\n      const ticket = tickets.find(t => t._id === ticketId) || tickets[0];\n      const newComment = {\n        _id: 'comment-' + Date.now(),\n        message: commentData.message,\n        user: {\n          _id: 'guest-user-id',\n          name: 'Guest User',\n          email: 'guest@example.com',\n          role: 'customer'\n        },\n        createdAt: new Date().toISOString(),\n        images: commentData.images || []\n      };\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            ...ticket,\n            comments: [...ticket.comments, newComment]\n          });\n        }, 700);\n      });\n    }\n    return this.request(`/tickets/${ticketId}/comments`, {\n      method: 'POST',\n      body: JSON.stringify(commentData)\n    });\n  }\n\n  // Image upload methods\n  async uploadImage(imageFile) {\n    if (this.isGuestMode()) {\n      // Simulate image upload for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            filename: 'demo-image-' + Date.now() + '.jpg',\n            originalName: imageFile.name,\n            url: '/uploads/demo-image.jpg',\n            uploadedAt: new Date().toISOString()\n          });\n        }, 1000);\n      });\n    }\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    console.log('Uploading single image:', imageFile.name);\n    try {\n      const response = await fetch(`http://localhost:5001/api/upload/image`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Image upload error:', error);\n      throw error;\n    }\n  }\n  async uploadImages(imageFiles) {\n    if (this.isGuestMode()) {\n      // Simulate multiple image upload for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const uploadedImages = Array.from(imageFiles).map((file, index) => ({\n            filename: `demo-image-${Date.now()}-${index}.jpg`,\n            originalName: file.name,\n            url: `/uploads/demo-image-${index}.jpg`,\n            uploadedAt: new Date().toISOString()\n          }));\n          resolve(uploadedImages);\n        }, 1200);\n      });\n    }\n    const formData = new FormData();\n    for (let i = 0; i < imageFiles.length; i++) {\n      formData.append('images', imageFiles[i]);\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    console.log('Uploading multiple images:', imageFiles.length);\n    try {\n      const response = await fetch(`http://localhost:5001/api/upload/images`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Images upload error:', error);\n      throw error;\n    }\n  }\n\n  // Search and filter methods\n  async searchTickets(searchTerm, filters = {}) {\n    if (this.isGuestMode()) {\n      // Return filtered mock data\n      let tickets = this.getMockTickets();\n      if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        tickets = tickets.filter(ticket => ticket.title.toLowerCase().includes(term) || ticket.description.toLowerCase().includes(term));\n      }\n      return new Promise(resolve => {\n        setTimeout(() => resolve(tickets), 400);\n      });\n    }\n    const params = new URLSearchParams();\n    if (searchTerm) params.append('search', searchTerm);\n    if (filters.priority) params.append('priority', filters.priority);\n    if (filters.category) params.append('category', filters.category);\n    if (filters.assignedTo) params.append('assignedTo', filters.assignedTo);\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    return this.request(`/tickets/search?${params.toString()}`);\n  }\n  async getAgents() {\n    if (this.isGuestMode()) {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(this.getMockAgents()), 300);\n      });\n    }\n    return this.request('/users/agents');\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","isGuestMode","token","localStorage","getItem","startsWith","getMockTickets","_id","title","description","category","priority","status","user","name","email","createdAt","comments","message","role","images","assignedTo","getMockAgents","getAuthHeaders","headers","Authorization","request","endpoint","options","url","config","response","fetch","contentType","get","includes","data","json","ok","console","error","Error","text","register","userData","method","body","JSON","stringify","login","credentials","getProfile","Promise","resolve","setTimeout","id","getTickets","createTicket","ticketData","newTicket","Date","now","toISOString","getTicketById","tickets","ticket","find","t","updateTicket","updateData","addComment","ticketId","commentData","newComment","uploadImage","imageFile","filename","originalName","uploadedAt","formData","FormData","append","log","errorData","uploadImages","imageFiles","uploadedImages","Array","from","map","file","index","i","length","searchTickets","searchTerm","filters","term","toLowerCase","filter","params","URLSearchParams","dateFrom","dateTo","sortBy","toString","getAgents","apiService"],"sources":["/Users/crops/Desktop/TicketSystem/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5002/api';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Check if current user is in guest mode\n  isGuestMode() {\n    const token = localStorage.getItem('token');\n    return token && token.startsWith('guest-token-');\n  }\n\n  // Mock data for guest mode\n  getMockTickets() {\n    return [\n      {\n        _id: 'mock-ticket-1',\n        title: 'Login Issue with Mobile App',\n        description: 'I am unable to login to the mobile application. The login button is not responding when I tap it. This has been happening since yesterday.',\n        category: 'technical',\n        priority: 'high',\n        status: 'open',\n        user: {\n          _id: 'guest-user-id',\n          name: 'Guest User',\n          email: 'guest@example.com'\n        },\n        createdAt: '2024-01-15T10:30:00Z',\n        comments: [\n          {\n            _id: 'comment-1',\n            message: 'Thank you for reporting this issue. We are looking into it.',\n            user: {\n              _id: 'agent-1',\n              name: 'Support Agent',\n              email: 'agent@company.com',\n              role: 'agent'\n            },\n            createdAt: '2024-01-15T11:00:00Z'\n          }\n        ],\n        images: []\n      },\n      {\n        _id: 'mock-ticket-2',\n        title: 'Billing Discrepancy',\n        description: 'There seems to be an error in my latest bill. I was charged twice for the same service.',\n        category: 'billing',\n        priority: 'medium',\n        status: 'in-progress',\n        user: {\n          _id: 'guest-user-id',\n          name: 'Guest User',\n          email: 'guest@example.com'\n        },\n        assignedTo: {\n          _id: 'agent-2',\n          name: 'Billing Specialist',\n          email: 'billing@company.com'\n        },\n        createdAt: '2024-01-14T14:20:00Z',\n        comments: [],\n        images: []\n      },\n      {\n        _id: 'mock-ticket-3',\n        title: 'Feature Request: Dark Mode',\n        description: 'It would be great to have a dark mode option in the application for better user experience.',\n        category: 'general',\n        priority: 'low',\n        status: 'resolved',\n        user: {\n          _id: 'guest-user-id',\n          name: 'Guest User',\n          email: 'guest@example.com'\n        },\n        createdAt: '2024-01-13T09:15:00Z',\n        comments: [\n          {\n            _id: 'comment-2',\n            message: 'Great suggestion! We have added this to our roadmap.',\n            user: {\n              _id: 'admin-1',\n              name: 'Product Manager',\n              email: 'pm@company.com',\n              role: 'admin'\n            },\n            createdAt: '2024-01-14T16:30:00Z'\n          },\n          {\n            _id: 'comment-3',\n            message: 'Dark mode has been implemented in version 2.1.0',\n            user: {\n              _id: 'admin-1',\n              name: 'Product Manager',\n              email: 'pm@company.com',\n              role: 'admin'\n            },\n            createdAt: '2024-01-15T12:45:00Z'\n          }\n        ],\n        images: []\n      }\n    ];\n  }\n\n  getMockAgents() {\n    return [\n      {\n        _id: 'agent-1',\n        name: 'Support Agent',\n        email: 'agent@company.com',\n        role: 'agent'\n      },\n      {\n        _id: 'agent-2',\n        name: 'Billing Specialist',\n        email: 'billing@company.com',\n        role: 'agent'\n      },\n      {\n        _id: 'admin-1',\n        name: 'Product Manager',\n        email: 'pm@company.com',\n        role: 'admin'\n      }\n    ];\n  }\n\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    \n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return headers;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...options.headers\n      }\n    };\n\n    // Only log errors, not every request\n    try {\n      const response = await fetch(url, config);\n      \n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        \n        if (!response.ok) {\n          console.error('API Error:', data.message);\n          throw new Error(data.message || 'Something went wrong');\n        }\n        \n        return data;\n      } else {\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        throw new Error('Server returned invalid response');\n      }\n    } catch (error) {\n      console.error('API Request Error:', error.message);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n\n  async getProfile() {\n    if (this.isGuestMode()) {\n      // Return guest user profile\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            token: localStorage.getItem('token'),\n            user: {\n              id: 'guest-user-id',\n              name: 'Guest User',\n              email: 'guest@example.com',\n              role: 'customer'\n            }\n          });\n        }, 200);\n      });\n    }\n    return this.request('/auth/profile');\n  }\n\n  // Ticket methods\n  async getTickets() {\n    if (this.isGuestMode()) {\n      // Return mock data for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => resolve(this.getMockTickets()), 500);\n      });\n    }\n    return this.request('/tickets');\n  }\n\n  async createTicket(ticketData) {\n    if (this.isGuestMode()) {\n      // Simulate ticket creation for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const newTicket = {\n            _id: 'mock-ticket-' + Date.now(),\n            ...ticketData,\n            status: 'open',\n            user: {\n              _id: 'guest-user-id',\n              name: 'Guest User',\n              email: 'guest@example.com'\n            },\n            createdAt: new Date().toISOString(),\n            comments: [],\n            images: ticketData.images || []\n          };\n          resolve(newTicket);\n        }, 800);\n      });\n    }\n    return this.request('/tickets', {\n      method: 'POST',\n      body: JSON.stringify(ticketData)\n    });\n  }\n\n  async getTicketById(id) {\n    if (this.isGuestMode()) {\n      // Return mock ticket data\n      const tickets = this.getMockTickets();\n      const ticket = tickets.find(t => t._id === id);\n      return new Promise(resolve => {\n        setTimeout(() => resolve(ticket || tickets[0]), 300);\n      });\n    }\n    return this.request(`/tickets/${id}`);\n  }\n\n  async updateTicket(id, updateData) {\n    if (this.isGuestMode()) {\n      // Simulate ticket update for guest mode\n      const tickets = this.getMockTickets();\n      const ticket = tickets.find(t => t._id === id) || tickets[0];\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({ ...ticket, ...updateData });\n        }, 600);\n      });\n    }\n    return this.request(`/tickets/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n\n  async addComment(ticketId, commentData) {\n    if (this.isGuestMode()) {\n      // Simulate adding comment for guest mode\n      const tickets = this.getMockTickets();\n      const ticket = tickets.find(t => t._id === ticketId) || tickets[0];\n      const newComment = {\n        _id: 'comment-' + Date.now(),\n        message: commentData.message,\n        user: {\n          _id: 'guest-user-id',\n          name: 'Guest User',\n          email: 'guest@example.com',\n          role: 'customer'\n        },\n        createdAt: new Date().toISOString(),\n        images: commentData.images || []\n      };\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            ...ticket,\n            comments: [...ticket.comments, newComment]\n          });\n        }, 700);\n      });\n    }\n    return this.request(`/tickets/${ticketId}/comments`, {\n      method: 'POST',\n      body: JSON.stringify(commentData)\n    });\n  }\n\n  // Image upload methods\n  async uploadImage(imageFile) {\n    if (this.isGuestMode()) {\n      // Simulate image upload for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            filename: 'demo-image-' + Date.now() + '.jpg',\n            originalName: imageFile.name,\n            url: '/uploads/demo-image.jpg',\n            uploadedAt: new Date().toISOString()\n          });\n        }, 1000);\n      });\n    }\n\n    const formData = new FormData();\n    formData.append('image', imageFile);\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    console.log('Uploading single image:', imageFile.name);\n\n    try {\n      const response = await fetch(`http://localhost:5001/api/upload/image`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Image upload error:', error);\n      throw error;\n    }\n  }\n\n  async uploadImages(imageFiles) {\n    if (this.isGuestMode()) {\n      // Simulate multiple image upload for guest mode\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const uploadedImages = Array.from(imageFiles).map((file, index) => ({\n            filename: `demo-image-${Date.now()}-${index}.jpg`,\n            originalName: file.name,\n            url: `/uploads/demo-image-${index}.jpg`,\n            uploadedAt: new Date().toISOString()\n          }));\n          resolve(uploadedImages);\n        }, 1200);\n      });\n    }\n\n    const formData = new FormData();\n    for (let i = 0; i < imageFiles.length; i++) {\n      formData.append('images', imageFiles[i]);\n    }\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    console.log('Uploading multiple images:', imageFiles.length);\n\n    try {\n      const response = await fetch(`http://localhost:5001/api/upload/images`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n          // Don't set Content-Type - let browser set it with boundary for FormData\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Images upload error:', error);\n      throw error;\n    }\n  }\n\n  // Search and filter methods\n  async searchTickets(searchTerm, filters = {}) {\n    if (this.isGuestMode()) {\n      // Return filtered mock data\n      let tickets = this.getMockTickets();\n      if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        tickets = tickets.filter(ticket => \n          ticket.title.toLowerCase().includes(term) ||\n          ticket.description.toLowerCase().includes(term)\n        );\n      }\n      return new Promise(resolve => {\n        setTimeout(() => resolve(tickets), 400);\n      });\n    }\n    \n    const params = new URLSearchParams();\n    if (searchTerm) params.append('search', searchTerm);\n    if (filters.priority) params.append('priority', filters.priority);\n    if (filters.category) params.append('category', filters.category);\n    if (filters.assignedTo) params.append('assignedTo', filters.assignedTo);\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n\n    return this.request(`/tickets/search?${params.toString()}`);\n  }\n\n  async getAgents() {\n    if (this.isGuestMode()) {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(this.getMockAgents()), 300);\n      });\n    }\n    return this.request('/users/agents');\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}