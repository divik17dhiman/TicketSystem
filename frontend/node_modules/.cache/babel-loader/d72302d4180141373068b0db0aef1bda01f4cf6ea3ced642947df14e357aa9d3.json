{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Divik\\\\Downloads\\\\ticketsupportsystem\\\\frontend\\\\src\\\\context\\\\TicketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport ApiService from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketContext = /*#__PURE__*/createContext();\nexport const useTickets = () => {\n  _s();\n  const context = useContext(TicketContext);\n  if (!context) {\n    throw new Error('useTickets must be used within a TicketProvider');\n  }\n  return context;\n};\n_s(useTickets, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const TicketProvider = ({\n  children\n}) => {\n  _s2();\n  const [tickets, setTickets] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n  const fetchTickets = useCallback(async () => {\n    // Check if already loading to prevent multiple simultaneous calls\n    if (loading) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await ApiService.getTickets();\n      setTickets(response);\n    } catch (error) {\n      setError(error.message || 'Failed to fetch tickets');\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Remove loading from dependencies\n\n  const createTicket = async ticketData => {\n    try {\n      const response = await ApiService.createTicket(ticketData);\n      setTickets(prev => [response, ...prev]);\n      return {\n        success: true,\n        ticket: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to create ticket'\n      };\n    }\n  };\n  const updateTicket = async (ticketId, updateData) => {\n    try {\n      const response = await ApiService.updateTicket(ticketId, updateData);\n      setTickets(prev => {\n        const updated = prev.map(ticket => {\n          if (ticket._id === ticketId) {\n            return response;\n          }\n          return ticket;\n        });\n        return updated;\n      });\n      return {\n        success: true,\n        ticket: response\n      };\n    } catch (error) {\n      console.error('Update ticket error:', error);\n      return {\n        success: false,\n        message: error.message || 'Failed to update ticket'\n      };\n    }\n  };\n  const getTicketById = ticketId => {\n    return tickets.find(ticket => ticket._id === ticketId);\n  };\n  const fetchTicketDetails = useCallback(async ticketId => {\n    try {\n      const response = await ApiService.getTicketById(ticketId);\n\n      // Update the ticket in the tickets array with fresh data\n      setTickets(prev => {\n        const updated = prev.map(ticket => ticket._id === ticketId ? response : ticket);\n        return updated;\n      });\n      return {\n        success: true,\n        ticket: response\n      };\n    } catch (error) {\n      console.error('Fetch ticket details error:', error);\n      return {\n        success: false,\n        message: error.message || 'Failed to fetch ticket details'\n      };\n    }\n  }, []); // Empty dependency array since it doesn't depend on any state\n\n  const addComment = async (ticketId, message, images = []) => {\n    try {\n      const response = await ApiService.addComment(ticketId, {\n        message,\n        images\n      });\n      console.log('Add comment response:', response);\n\n      // Update the specific ticket with the full response (which should include all comments)\n      setTickets(prev => prev.map(ticket => ticket._id === ticketId ? response : ticket));\n      return {\n        success: true,\n        ticket: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to add comment'\n      };\n    }\n  };\n  const getTicketStats = () => {\n    const stats = {\n      total: tickets.length,\n      open: tickets.filter(t => t.status === 'open').length,\n      inProgress: tickets.filter(t => t.status === 'in-progress').length,\n      resolved: tickets.filter(t => t.status === 'resolved').length,\n      closed: tickets.filter(t => t.status === 'closed').length\n    };\n    return stats;\n  };\n  useEffect(() => {\n    if (user && !loading) {\n      // Add loading check here too\n      fetchTickets();\n    }\n  }, [user, fetchTickets]); // Keep fetchTickets dependency but it won't change now\n\n  const value = {\n    tickets,\n    loading,\n    error,\n    fetchTickets,\n    createTicket,\n    updateTicket,\n    addComment,\n    getTicketById,\n    fetchTicketDetails,\n    getTicketStats\n  };\n  return /*#__PURE__*/_jsxDEV(TicketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s2(TicketProvider, \"8VOKEWQnwIYitHXyRDl8UhPGGIg=\", false, function () {\n  return [useAuth];\n});\n_c = TicketProvider;\nvar _c;\n$RefreshReg$(_c, \"TicketProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","ApiService","useAuth","jsxDEV","_jsxDEV","TicketContext","useTickets","_s","context","Error","TicketProvider","children","_s2","tickets","setTickets","loading","setLoading","error","setError","user","fetchTickets","response","getTickets","message","createTicket","ticketData","prev","success","ticket","updateTicket","ticketId","updateData","updated","map","_id","console","getTicketById","find","fetchTicketDetails","addComment","images","log","getTicketStats","stats","total","length","open","filter","t","status","inProgress","resolved","closed","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Divik/Downloads/ticketsupportsystem/frontend/src/context/TicketContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport ApiService from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst TicketContext = createContext();\r\n\r\nexport const useTickets = () => {\r\n  const context = useContext(TicketContext);\r\n  if (!context) {\r\n    throw new Error('useTickets must be used within a TicketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const TicketProvider = ({ children }) => {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  const fetchTickets = useCallback(async () => {\r\n    // Check if already loading to prevent multiple simultaneous calls\r\n    if (loading) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await ApiService.getTickets();\r\n      setTickets(response);\r\n    } catch (error) {\r\n      setError(error.message || 'Failed to fetch tickets');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // Remove loading from dependencies\r\n\r\n  const createTicket = async (ticketData) => {\r\n    try {\r\n      const response = await ApiService.createTicket(ticketData);\r\n      setTickets(prev => [response, ...prev]);\r\n      return { success: true, ticket: response };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to create ticket'\r\n      };\r\n    }\r\n  };\r\n\r\n  const updateTicket = async (ticketId, updateData) => {\r\n    try {\r\n      const response = await ApiService.updateTicket(ticketId, updateData);\r\n      \r\n      setTickets(prev => {\r\n        const updated = prev.map(ticket => {\r\n          if (ticket._id === ticketId) {\r\n            return response;\r\n          }\r\n          return ticket;\r\n        });\r\n        return updated;\r\n      });\r\n      \r\n      return { success: true, ticket: response };\r\n    } catch (error) {\r\n      console.error('Update ticket error:', error);\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to update ticket'\r\n      };\r\n    }\r\n  };\r\n\r\n  const getTicketById = (ticketId) => {\r\n    return tickets.find(ticket => ticket._id === ticketId);\r\n  };\r\n\r\n  const fetchTicketDetails = useCallback(async (ticketId) => {\r\n    try {\r\n      const response = await ApiService.getTicketById(ticketId);\r\n      \r\n      // Update the ticket in the tickets array with fresh data\r\n      setTickets(prev => {\r\n        const updated = prev.map(ticket =>\r\n          ticket._id === ticketId ? response : ticket\r\n        );\r\n        return updated;\r\n      });\r\n      \r\n      return { success: true, ticket: response };\r\n    } catch (error) {\r\n      console.error('Fetch ticket details error:', error);\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to fetch ticket details'\r\n      };\r\n    }\r\n  }, []); // Empty dependency array since it doesn't depend on any state\r\n\r\n  const addComment = async (ticketId, message, images = []) => {\r\n    try {\r\n      const response = await ApiService.addComment(ticketId, { message, images });\r\n      console.log('Add comment response:', response);\r\n      \r\n      // Update the specific ticket with the full response (which should include all comments)\r\n      setTickets(prev =>\r\n        prev.map(ticket =>\r\n          ticket._id === ticketId ? response : ticket\r\n        )\r\n      );\r\n      \r\n      return { success: true, ticket: response };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to add comment'\r\n      };\r\n    }\r\n  };\r\n\r\n  const getTicketStats = () => {\r\n    const stats = {\r\n      total: tickets.length,\r\n      open: tickets.filter(t => t.status === 'open').length,\r\n      inProgress: tickets.filter(t => t.status === 'in-progress').length,\r\n      resolved: tickets.filter(t => t.status === 'resolved').length,\r\n      closed: tickets.filter(t => t.status === 'closed').length\r\n    };\r\n    return stats;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user && !loading) { // Add loading check here too\r\n      fetchTickets();\r\n    }\r\n  }, [user, fetchTickets]); // Keep fetchTickets dependency but it won't change now\r\n\r\n  const value = {\r\n    tickets,\r\n    loading,\r\n    error,\r\n    fetchTickets,\r\n    createTicket,\r\n    updateTicket,\r\n    addComment,\r\n    getTicketById,\r\n    fetchTicketDetails,\r\n    getTicketStats\r\n  };\r\n\r\n  return (\r\n    <TicketContext.Provider value={value}>\r\n      {children}\r\n    </TicketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC1F,OAAOC,UAAU,MAAM,iBAAiB;AACxC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,gBAAGT,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMU,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGV,UAAU,CAACO,aAAa,CAAC;EACzC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACpE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,UAAU;AAQvB,OAAO,MAAMI,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEsB;EAAK,CAAC,GAAGjB,OAAO,CAAC,CAAC;EAE1B,MAAMkB,YAAY,GAAGpB,WAAW,CAAC,YAAY;IAC3C;IACA,IAAIe,OAAO,EAAE;IAEbC,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMpB,UAAU,CAACqB,UAAU,CAAC,CAAC;MAC9CR,UAAU,CAACO,QAAQ,CAAC;IACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACM,OAAO,IAAI,yBAAyB,CAAC;IACtD,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMQ,YAAY,GAAG,MAAOC,UAAU,IAAK;IACzC,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMpB,UAAU,CAACuB,YAAY,CAACC,UAAU,CAAC;MAC1DX,UAAU,CAACY,IAAI,IAAI,CAACL,QAAQ,EAAE,GAAGK,IAAI,CAAC,CAAC;MACvC,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAEP;MAAS,CAAC;IAC5C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,OAAO;QACLU,OAAO,EAAE,KAAK;QACdJ,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAI;MAC5B,CAAC;IACH;EACF,CAAC;EAED,MAAMM,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,UAAU,KAAK;IACnD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMpB,UAAU,CAAC4B,YAAY,CAACC,QAAQ,EAAEC,UAAU,CAAC;MAEpEjB,UAAU,CAACY,IAAI,IAAI;QACjB,MAAMM,OAAO,GAAGN,IAAI,CAACO,GAAG,CAACL,MAAM,IAAI;UACjC,IAAIA,MAAM,CAACM,GAAG,KAAKJ,QAAQ,EAAE;YAC3B,OAAOT,QAAQ;UACjB;UACA,OAAOO,MAAM;QACf,CAAC,CAAC;QACF,OAAOI,OAAO;MAChB,CAAC,CAAC;MAEF,OAAO;QAAEL,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAEP;MAAS,CAAC;IAC5C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdkB,OAAO,CAAClB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO;QACLU,OAAO,EAAE,KAAK;QACdJ,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAI;MAC5B,CAAC;IACH;EACF,CAAC;EAED,MAAMa,aAAa,GAAIN,QAAQ,IAAK;IAClC,OAAOjB,OAAO,CAACwB,IAAI,CAACT,MAAM,IAAIA,MAAM,CAACM,GAAG,KAAKJ,QAAQ,CAAC;EACxD,CAAC;EAED,MAAMQ,kBAAkB,GAAGtC,WAAW,CAAC,MAAO8B,QAAQ,IAAK;IACzD,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMpB,UAAU,CAACmC,aAAa,CAACN,QAAQ,CAAC;;MAEzD;MACAhB,UAAU,CAACY,IAAI,IAAI;QACjB,MAAMM,OAAO,GAAGN,IAAI,CAACO,GAAG,CAACL,MAAM,IAC7BA,MAAM,CAACM,GAAG,KAAKJ,QAAQ,GAAGT,QAAQ,GAAGO,MACvC,CAAC;QACD,OAAOI,OAAO;MAChB,CAAC,CAAC;MAEF,OAAO;QAAEL,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAEP;MAAS,CAAC;IAC5C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdkB,OAAO,CAAClB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QACLU,OAAO,EAAE,KAAK;QACdJ,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAI;MAC5B,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMgB,UAAU,GAAG,MAAAA,CAAOT,QAAQ,EAAEP,OAAO,EAAEiB,MAAM,GAAG,EAAE,KAAK;IAC3D,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMpB,UAAU,CAACsC,UAAU,CAACT,QAAQ,EAAE;QAAEP,OAAO;QAAEiB;MAAO,CAAC,CAAC;MAC3EL,OAAO,CAACM,GAAG,CAAC,uBAAuB,EAAEpB,QAAQ,CAAC;;MAE9C;MACAP,UAAU,CAACY,IAAI,IACbA,IAAI,CAACO,GAAG,CAACL,MAAM,IACbA,MAAM,CAACM,GAAG,KAAKJ,QAAQ,GAAGT,QAAQ,GAAGO,MACvC,CACF,CAAC;MAED,OAAO;QAAED,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAEP;MAAS,CAAC;IAC5C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,OAAO;QACLU,OAAO,EAAE,KAAK;QACdJ,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAI;MAC5B,CAAC;IACH;EACF,CAAC;EAED,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,KAAK,GAAG;MACZC,KAAK,EAAE/B,OAAO,CAACgC,MAAM;MACrBC,IAAI,EAAEjC,OAAO,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,MAAM,CAAC,CAACJ,MAAM;MACrDK,UAAU,EAAErC,OAAO,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,aAAa,CAAC,CAACJ,MAAM;MAClEM,QAAQ,EAAEtC,OAAO,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,UAAU,CAAC,CAACJ,MAAM;MAC7DO,MAAM,EAAEvC,OAAO,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,QAAQ,CAAC,CAACJ;IACrD,CAAC;IACD,OAAOF,KAAK;EACd,CAAC;EAED5C,SAAS,CAAC,MAAM;IACd,IAAIoB,IAAI,IAAI,CAACJ,OAAO,EAAE;MAAE;MACtBK,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACD,IAAI,EAAEC,YAAY,CAAC,CAAC,CAAC,CAAC;;EAE1B,MAAMiC,KAAK,GAAG;IACZxC,OAAO;IACPE,OAAO;IACPE,KAAK;IACLG,YAAY;IACZI,YAAY;IACZK,YAAY;IACZU,UAAU;IACVH,aAAa;IACbE,kBAAkB;IAClBI;EACF,CAAC;EAED,oBACEtC,OAAA,CAACC,aAAa,CAACiD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA1C,QAAA,EAClCA;EAAQ;IAAA4C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC9C,GAAA,CA7IWF,cAAc;EAAA,QAIRR,OAAO;AAAA;AAAAyD,EAAA,GAJbjD,cAAc;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}