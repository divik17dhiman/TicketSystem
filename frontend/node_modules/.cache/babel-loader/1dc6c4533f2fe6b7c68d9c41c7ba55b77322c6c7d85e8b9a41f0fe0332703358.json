{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Divik\\\\Downloads\\\\ticketsupportsystem\\\\frontend\\\\src\\\\context\\\\TicketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport ApiService from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketContext = /*#__PURE__*/createContext();\nexport const useTickets = () => {\n  _s();\n  const context = useContext(TicketContext);\n  if (!context) {\n    throw new Error('useTickets must be used within a TicketProvider');\n  }\n  return context;\n};\n_s(useTickets, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const TicketProvider = ({\n  children\n}) => {\n  _s2();\n  const [tickets, setTickets] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n  const fetchTickets = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await ApiService.getTickets();\n      setTickets(response);\n    } catch (error) {\n      setError(error.message || 'Failed to fetch tickets');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createTicket = async ticketData => {\n    try {\n      const response = await ApiService.createTicket(ticketData);\n      setTickets(prev => [response, ...prev]);\n      return {\n        success: true,\n        ticket: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to create ticket'\n      };\n    }\n  };\n  const updateTicket = async (ticketId, updateData) => {\n    try {\n      const response = await ApiService.updateTicket(ticketId, updateData);\n      setTickets(prev => prev.map(ticket => ticket._id === ticketId ? response : ticket));\n      return {\n        success: true,\n        ticket: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to update ticket'\n      };\n    }\n  };\n  const addComment = async (ticketId, message) => {\n    try {\n      const response = await ApiService.addComment(ticketId, message);\n      // Note: The API returns just the comment, not the full ticket\n      // You might need to fetch the full ticket again or update the ticket in state\n      await fetchTickets(); // Refresh tickets to get updated data\n      return {\n        success: true,\n        comment: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to add comment'\n      };\n    }\n  };\n  const getTicketById = ticketId => {\n    return tickets.find(ticket => ticket._id === ticketId);\n  };\n  const getTicketStats = () => {\n    const stats = {\n      total: tickets.length,\n      open: tickets.filter(t => t.status === 'open').length,\n      inProgress: tickets.filter(t => t.status === 'in-progress').length,\n      resolved: tickets.filter(t => t.status === 'resolved').length,\n      closed: tickets.filter(t => t.status === 'closed').length\n    };\n    return stats;\n  };\n  useEffect(() => {\n    if (user) {\n      fetchTickets();\n    }\n  }, [user]);\n  const value = {\n    tickets,\n    loading,\n    error,\n    fetchTickets,\n    createTicket,\n    updateTicket,\n    addComment,\n    getTicketById,\n    getTicketStats\n  };\n  return /*#__PURE__*/_jsxDEV(TicketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s2(TicketProvider, \"wT1MKeKiUnur9dLXfCHUiRIghq4=\", false, function () {\n  return [useAuth];\n});\n_c = TicketProvider;\nvar _c;\n$RefreshReg$(_c, \"TicketProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","ApiService","useAuth","jsxDEV","_jsxDEV","TicketContext","useTickets","_s","context","Error","TicketProvider","children","_s2","tickets","setTickets","loading","setLoading","error","setError","user","fetchTickets","response","getTickets","message","createTicket","ticketData","prev","success","ticket","updateTicket","ticketId","updateData","map","_id","addComment","comment","getTicketById","find","getTicketStats","stats","total","length","open","filter","t","status","inProgress","resolved","closed","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Divik/Downloads/ticketsupportsystem/frontend/src/context/TicketContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport ApiService from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst TicketContext = createContext();\r\n\r\nexport const useTickets = () => {\r\n  const context = useContext(TicketContext);\r\n  if (!context) {\r\n    throw new Error('useTickets must be used within a TicketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const TicketProvider = ({ children }) => {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  const fetchTickets = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await ApiService.getTickets();\r\n      setTickets(response);\r\n    } catch (error) {\r\n      setError(error.message || 'Failed to fetch tickets');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createTicket = async (ticketData) => {\r\n    try {\r\n      const response = await ApiService.createTicket(ticketData);\r\n      setTickets(prev => [response, ...prev]);\r\n      return { success: true, ticket: response };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to create ticket'\r\n      };\r\n    }\r\n  };\r\n\r\n  const updateTicket = async (ticketId, updateData) => {\r\n    try {\r\n      const response = await ApiService.updateTicket(ticketId, updateData);\r\n      setTickets(prev =>\r\n        prev.map(ticket =>\r\n          ticket._id === ticketId ? response : ticket\r\n        )\r\n      );\r\n      return { success: true, ticket: response };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to update ticket'\r\n      };\r\n    }\r\n  };\r\n\r\n  const addComment = async (ticketId, message) => {\r\n    try {\r\n      const response = await ApiService.addComment(ticketId, message);\r\n      // Note: The API returns just the comment, not the full ticket\r\n      // You might need to fetch the full ticket again or update the ticket in state\r\n      await fetchTickets(); // Refresh tickets to get updated data\r\n      return { success: true, comment: response };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to add comment'\r\n      };\r\n    }\r\n  };\r\n\r\n  const getTicketById = (ticketId) => {\r\n    return tickets.find(ticket => ticket._id === ticketId);\r\n  };\r\n\r\n  const getTicketStats = () => {\r\n    const stats = {\r\n      total: tickets.length,\r\n      open: tickets.filter(t => t.status === 'open').length,\r\n      inProgress: tickets.filter(t => t.status === 'in-progress').length,\r\n      resolved: tickets.filter(t => t.status === 'resolved').length,\r\n      closed: tickets.filter(t => t.status === 'closed').length\r\n    };\r\n    return stats;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchTickets();\r\n    }\r\n  }, [user]);\r\n\r\n  const value = {\r\n    tickets,\r\n    loading,\r\n    error,\r\n    fetchTickets,\r\n    createTicket,\r\n    updateTicket,\r\n    addComment,\r\n    getTicketById,\r\n    getTicketStats\r\n  };\r\n\r\n  return (\r\n    <TicketContext.Provider value={value}>\r\n      {children}\r\n    </TicketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}